version: 2.1

orbs: 
  slack: circleci/slack@4.10.1

executors:
  nodejs-executor:
    docker:
      - image: circleci/node:13.8.0
  aws-cli-executor:
    docker:
      - image: amazon/aws-cli
  py3-executor:
    docker:
      - image: python:3.10-alpine3.16

commands:
  destroy-environments:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflowID:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflowID >> --region us-east-1
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflowID >> --region us-east-1
  revert-migrations:
    description: Revert the last migration
    parameters:
        workflowID:
            type: string      
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
              SUCCESS=$(curl --insecure https://keyvalue.immanuel.co/api/KeyVal/GetValue/4t4rtgjw/<<parameters.workflowID>>)
              # Logic for reverting the database state
              if (( $SUCCESS == 1 ));
              then
                  cd ~/project/backend
                  npm install
                  npm run migration:revert
              fi  
  slack-notify-fail:
    steps:
      - slack/notify:
          event: fail
          mentions: '@davidkalu14'
          template: basic_fail_1
  slack-notify-success:
    steps:
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1

jobs:
  build-frontend:
    executor: nodejs-executor
    resource_class: medium
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-npm-modules]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: 
            - 'frontend/node_modules'
          key: frontend-npm-modules
  
  build-backend:
    executor: nodejs-executor
    resource_class: medium
    steps:
      - checkout
      - restore_cache:
          keys: [backend-npm-modules]
      - run:
          name: Build back-end
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths:
            - "backend/node_modules"
          key: backend-npm-modules

  test-frontend:
    executor: nodejs-executor
    resource_class: medium
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-npm-modules]
      - run:
          name: Test frontend
          command: |
            cd frontend
            npm install
            npm run test

  test-backend:
    executor: nodejs-executor
    resource_class: medium
    steps:
      - checkout
      - restore_cache:
          keys: [backend-npm-modules]
      - run:
          name: Test backend
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    executor: nodejs-executor
    resource_class: medium
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-npm-modules]
      - run:
          name: Scan frontend
          command: |
            cd frontend
            npm install
            npm audit fix --force
            npm audit --audit-level=critical
      - slack-notify-fail
      - slack-notify-success

  scan-backend:
    executor: nodejs-executor
    resource_class: medium
    steps:
      - checkout
      - restore_cache:
          keys: [backend-npm-modules]
      - run:
          name: Scan backend
          command: |
            cd backend
            npm install
            # npm audit --audit-level=critical
            npm audit fix --audit-level=critical --force
      - slack-notify-fail
      - slack-notify-success

  deploy-infrastructure:
    executor: aws-cli-executor
    steps:
      - checkout
      - run: yum install tar gzip -y
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances --region us-east-1 --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:project,Values=udapeople" --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environments:
          workflowID: ${CIRCLE_WORKFLOW_ID:0:7}

  configure-infrastructure:
    executor: py3-executor
    resource_class: small
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: 
            - "b7:f4:54:83:71:40:fb:4d:56:03:3b:ca:7b:40:28:2c"
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache aws-cli ansible tar gzip openssh
            ansible --version
      - run:
          name: Configure server
          command: |
            pwd
            cd .circleci/ansible
            ls -al
            ansible-playbook -i inventory.txt configure-server.yml
          no_output_timeout: "30m"
      - destroy-environments:
          workflowID: "${CIRCLE_WORKFLOW_ID:0:7}"
  
  run-migrations:
    executor: py3-executor
    steps:
      - checkout
      - restore_cache:
          keys: [backend-npm-modules]
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache nodejs npm aws-cli curl
            cd backend
            pwd
            ls -al
            npm install
      - run:
          name: Run migrations
          command: |
            cd backend
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
                echo "https://keyvalue.immanuel.co/api/KeyVal/UpdateValue/4t4rtgjw/migration_$\{CIRCLE_WORKFLOW_ID:0:7\}/1%"
                curl --header "content-length:0" -X POST https://keyvalue.immanuel.co/api/KeyVal/UpdateValue/4t4rtgjw/migration_$\{CIRCLE_WORKFLOW_ID:0:7\}/1
            fi
      -  destroy-environments:
          workflowID: "${CIRCLE_WORKFLOW_ID:0:7}"

  deploy-frontend:
    executor: py3-executor
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache tar gzip nodejs npm aws-cli curl
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters 'Name=tag:project,Values=udapeople' --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environments:
          workflowID: "${CIRCLE_WORKFLOW_ID:0:7}"
  
  deploy-backend:
    executor: py3-executor
    steps:
      - checkout
      - restore_cache:
          keys: [backend-npm-modules]
      - add_ssh_keys:
          fingerprints: 
            - "b7:f4:54:83:71:40:fb:4d:56:03:3b:ca:7b:40:28:2c"
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache ansible tar gzip nodejs npm aws-cli curl
            ansible --version
      - run:
          name: Deploy backend
          command: |
            pwd
            cd backend
            touch .env
            echo ENVIRONMENT=production > ".env"
            echo NODE_ENV=production >> ".env"
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> ".env"
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> ".env"
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> ".env"
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> ".env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"

            pwd
            ls -al
            npm install
            npm run build
            cd ..
            pwd
            ls -al
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents of the inventory file is -----"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environments:
          workflowID: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflowID: "${CIRCLE_WORKFLOW_ID:0:7}"
  
  smoke-test:
    executor: py3-executor
    resource_class: small
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache tar gzip nodejs npm aws-cli curl
      - run:
          name: Get backend url and backend smoke test
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters 'Name=tag:project,Values=udapeople' --output text)
            echo ${BACKEND_IP}
            export BACKEND=$(echo $BACKEND_IP | grep -o '[^ ]*$')
            echo $BACKEND
            export API_URL="http://${BACKEND}:3030
            echo "Sleeping for 1 minute"
            sleep 60

            echo ${API_URL}
            if curl -v "${API_URL}/api/status" | grep "ok"
            then
              return 0
            else
              return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"
            echo ${URL}
            if curl -s ${URL} | grep "Welcome"
            then
              return 1
            else
              return 1
            fi
      - destroy-environments:
          workflowID: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflowID: "${CIRCLE_WORKFLOW_ID:0:7}"

  cloudfront-update:
    executor: aws-cli-executor
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install tar gzip -y
      - run: 
          name: Get stack workflow id
          command: |
            export oldWorkflowID=$(aws cloudformation list-exports --query "Exports[?Name==\`WorkflowID\`].Value" --no-paginate --output text | grep -o '[^-]*$')
            echo $oldWorkflowID >> ~/project/oldWorkflowID.txt
            cat ~/project/oldWorkflowID.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - "project/oldWorkflowID.txt"
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name InitialStack \
              --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      - destroy-environments:
          workflowID: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflowID: "${CIRCLE_WORKFLOW_ID:0:7}"
  
  cleanup:
    executor: aws-cli-executor
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            export OldWorkflowID="the id here"
            export STACKS=[] #put the list of stacks here
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              # your code here
            fi


# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires:
            - "build-frontend"
      - test-backend:
          requires:
            - "build-backend"
      - scan-frontend:
          requires:
            - "build-frontend"
      - scan-backend:
          requires:
            - "build-backend"
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          # filters:
          #   branches:
          #     only: [master]
      - configure-infrastructure:
          requires:
            - "deploy-infrastructure"
      - run-migrations:
          requires:
            - "configure-infrastructure"
      - deploy-frontend:
          requires:
            - "run-migrations"
      - deploy-backend:
          requires:
            - "run-migrations"
      - smoke-test:
          requires: [deploy-frontend, deploy-backend]

        
      
        
