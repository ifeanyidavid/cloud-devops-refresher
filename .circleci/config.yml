version: 2.1

orbs: 
  slack: circleci/slack@4.10.1

executors:
  nodejs-executor:
    docker:
      - image: circleci/node:13.8.0
    working_directory: /home/circleci/project
  aws-cli-executor:
    docker:
      - image: cimg/aws:2022.06
    working_directory: /home/circleci/project
  py3-executor:
    docker:
      - image: cimg/python:3.7.9-node
    working_directory: /home/circleci/project

commands:
  destroy-environments:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflowID:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflowID >>
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflowID >>
  slack-notify-fail:
    steps:
      - slack/notify:
          event: fail
          mentions: '@davidkalu14'
          template: basic_fail_1
  slack-notify-success:
    steps:
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1

jobs:
  build-frontend:
    executor: nodejs-executor
    resource_class: medium
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: 
            - 'frontend/node_modules'
          key: frontend-build
  
  build-backend:
    executor: nodejs-executor
    resource_class: medium
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Build back-end
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths:
            - "backend/node_modules"
          key: backend-build

  test-frontend:
    executor: nodejs-executor
    resource_class: medium
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-test]
      - run:
          name: Test frontend
          command: |
            cd frontend
            npm install
            npm run test
      - save_cache:
          paths:
            - "frontend/node_modules"
          key: frontend-test

  test-backend:
    executor: nodejs-executor
    resource_class: medium
    steps:
      - checkout
      - restore_cache:
          keys: [backend-test]
      - run:
          name: Test backend
          command: |
            cd backend
            npm install
            npm run test
      - save_cache:
          paths:
            - "backend/node_modules"
          key: backend-test

  scan-frontend:
    executor: nodejs-executor
    resource_class: medium
    steps:
      - checkout
      - restore_cache:
          keys: [scan-frontend]
      - run:
          name: Scan frontend
          command: |
            cd frontend
            npm install
            npm audit fix --force
            npm audit --audit-level=critical
      - slack-notify-fail
      - slack-notify-success
      - save_cache:
          paths:
            - "frontend/node_modules"
          key: scan-frontend

  scan-backend:
    executor: nodejs-executor
    resource_class: medium
    steps:
      - checkout
      - restore_cache:
          keys: [scan-backend]
      - run:
          name: Scan backend
          command: |
            cd backend
            npm install
            # npm audit --audit-level=critical
            npm audit fix --force
      - slack-notify-fail
      - slack-notify-success
      - save_cache:
          paths:
            - "backend/node_modules"
          key: scan-backend

  deploy-infrastructure:
    executor: aws-cli-executor
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:project,Values=udapeople" --output text >> ~/project/.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/
            - inventory.txt
      - destroy-environments:
          workflowID: "${CIRCLE_WORKFLOW_ID:0:7}"

  configure-infrastructure:
    executor: py3-executor
    resource_class: small
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: 
            - "16:d3:1a:8b:6a:2b:14:6b:0d:2e:71:d6:11:0e:49:07"
      - attach_workspace:
          at: ~/project/.circleci/ansible/
      - run:
          name: "Logging"
          command: |
            ls ~/project/.circleci
            ls ~/project/.circleci/ansible
            cat inventory.txt
      - run:
          name: Install dependencies
          command: |
            sudo apt-get update
            sudo apt-get -y install gzip tar awscli ansible
            ansible --version
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environments:
          workflowID: "${CIRCLE_WORKFLOW_ID:0:7}"


# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires:
            - "build-frontend"
      - test-backend:
          requires:
            - "build-backend"
      - scan-frontend:
          requires:
            - "build-frontend"
      - scan-backend:
          requires:
            - "build-backend"
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          # filters:
          #   branches:
          #     only: [test-feature-branch]
      - configure-infrastructure:
          requires:
            - "deploy-infrastructure"
        
      
        
